# %% 
### Importing modules
import pandas as pd 
from pandas import read_csv
from matplotlib import cm
from matplotlib_venn import venn2
import numpy as np
from matplotlib import pyplot as plt
import random
# %% 
### Read dataframe 

df = pd.DataFrame(read_csv(r'/Users/hawacoulibaly/Documents/HIVE Lab/OncoMX/QC ONcoMX Biomarkers/QC-Biomarkers-Test.csv'))
df.head()
# %% 
### Cleaning
df = df.rename(columns={'Disease name': 'Disease'})
df = df.rename(columns={'Biomarker ID': 'ID'})
df = df.rename(columns={'BEST biomarker type': 'BEST'})

#df.groupby('Disease').count()
# %%
color = cm.inferno_r(np.linspace(.4, .8, 30))
df.Disease.value_counts().plot(kind='bar', stacked=True, color=color, title='Biomarker Count per Cancer Type ', grid=False, figsize=(15,7))
# %%
# Prepare Data
dubc = df.groupby('Disease').BEST.nunique()
dtbc = df.groupby('Disease').size()


Totalcount = pd.DataFrame({'Disease':dtbc.index, 'Numb. total biomarkers':dtbc.values})
UniqueCount = pd.DataFrame({'Disease':dubc.index, 'Numb. unique biomarkers':dubc.values})


UniqueCount = UniqueCount.rename(columns={'Numb. unique biomarkers': 'counts'})
UniqueCount['Disease'] = UniqueCount['Disease'].replace({'breast cancer (DOID:1612)': 'breast cancer', \
    'prostate cancer (DOID:10283)': 'prostate cancer',\
        'ovarian cancer (DOID:2394)': 'ovarian cancer',\
            'lung cancer (DOID:1324)': 'lung cancer',\
                'stomach cancer (DOID:10534)':'stomach cancer',
                    'liver cancer (DOID:3571)': 'liver cancer', \
                        'pancreatic cancer (DOID:1793)': 'pancreatic cancer', \
                            'thyroid cancer (DOID:1781)': 'thyroid cancer',\
                                'esophageal cancer (DOID:5041)':'esophageal cancer',\
                                    'uterine cancer (DOID:363)' : 'uterine cancer',\
                                        'skin cancer (DOID:4159)': 'skin cancer',\
                                            'colorectal cancer (DOID:9256)': 'colorectal cancer',\
                                                'head and neck cancer (DOID:11934)': 'head and neck cancer', \
                                                    'urinary bladder cancer (DOID:11054)': 'urinary bladder cancer',\
                                                        'kidney cancer (DOID:263)':'kidney canecr'})

UniqueCount['Numb. total biomarkers'] = pd.Series(Totalcount['Numb. total biomarkers'])
UniqueCount.head()
# %%
import seaborn as sns 
sns.set()
UniqueCount.set_index('Disease').T.plot(kind='bar', stacked=True)
fig, ax = plt.subplots(figsize=(16,10), dpi= 80)
# %%
ax.vlines(x=UniqueCount.index, ymin=0, ymax=UniqueCount.counts, color='firebrick', alpha=0.7, linewidth=2)
ax.scatter(x=UniqueCount.index, y=UniqueCount.counts, s=75, color='firebrick', alpha=0.7)

# Title, Label, Ticks and Ylim
ax.set_title('Biomarker count per disease', fontdict={'size':22})
ax.set_ylabel('# of Biomarkers')
ax.set_xticklabels(UniqueCount.Disease.str.lower(), rotation=90, fontdict={'horizontalalignment': 'right', 'size':12})
ax.set_xticks(UniqueCount.index)
ax.set_ylim(0, 35)

# Annotate
for row in UniqueCount.itertuples():
    ax.text(row.Index, row.counts+.5, s=round(row.counts, 2), horizontalalignment= 'center', verticalalignment='bottom', fontsize=14)

plt.show()
#plt.savefig('Biomarker count.png')
# %%
a = len(pd.unique(df['ID'])) # Unique biomarkers 
m = len(df.index) # Total biomarkers 
venn2(subsets = (0, m, a), set_labels = ('Unique biomarkers', 'Total Biomarkers'))
plt.show()

# %%
# plt.hist([df1['text'],df2['printed']],
#           bins=100, range=(1,100), stacked=True, color = ['r','g'])

# %% 
UniqueCount.set_index('Disease').plot(kind='bar')
plt.title("BEST biomarkers per disease")
plt.ylabel("# of Biomarkers")
plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")
# %%
dubc = df.groupby('Disease').BEST.nunique()
dtbc = df.groupby('Disease').size()
# %%

Totalcount = pd.DataFrame({'Disease':dtbc.index, 'Numb. total biomarkers':dtbc.values})
UniqueCount = pd.DataFrame({'Disease':dubc.index, 'Numb. unique biomarkers':dubc.values})
# %%
df['BEST'] = df['BEST'].replace({'prognostic, diagnostic':'prognostic', 'diagnosis':'diagnostic'})
# %%
x_var = 'Disease'
groupby_var = 'BEST'
df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)
vals = [df[x_var].values.tolist() for i, df in df_agg]

# Draw
plt.figure(figsize=(16,9), dpi= 80)
colors = [plt.cm.Spectral(i/float(len(vals)-1)) for i in range(len(vals))]
n, bins, patches = plt.hist(vals, df[x_var].unique().__len__(), stacked=True, density=False, color=colors[:len(vals)])

# Decoration
plt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})
plt.title(f"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$", fontsize=22)
plt.xlabel(x_var)
plt.ylabel("Frequency")
plt.ylim(0, 40)
plt.xticks(ticks=bins, labels=np.unique(df[x_var]).tolist(), rotation=90, horizontalalignment='left')
plt.show()
# %%
