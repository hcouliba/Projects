# %% 
# ! pip install numpy
# ! pip install pandas

"""
Load datasets as dataframe
"""

# %%
import numpy as np
from itertools import count
import pandas as pd
from pandas.io.parsers import read_csv
import matplotlib.pyplot as plt
from scipy.stats import zscore
import seaborn as sns
import scipy
# %%
# mRNA data
dfmRNA = pd.read_csv(r'/Users/hawacoulibaly/Documents/GitHub/HIVE-Lab/Villagra Lab/RNA.processed.csv', index_col = 0)
# %%
#Clinical data
dfClinical = pd.read_csv(r'/Users/hawacoulibaly/Documents/GitHub/HIVE-Lab/Villagra Lab/clinical.csv', index_col= 0)
# %%
# Case id dictionary
dfDict = pd.read_csv(r'/Users/hawacoulibaly/Documents/GitHub/HIVE-Lab/Villagra Lab/case_id_dict.csv')
# %%
def Dataset(dframe, valCnt = False): 
  count = 1
  print('\nDataset basic dataframe function -')
  try:
    print(f'\n{count}: Info(): ')
    count+=1
    print(dframe.info())
  except: pass

  print(f'\n{count}: Describe(): ')
  count+=1
  print(dframe.describe())
  try:
    print(f'\n{count}: Columns: ')
    count+=1
    print(dframe.columns)
  except: pass

  print(f'\n{count}: Head() -- ')
  count+=1
  print(dframe.head())

  print(f'\n{count}: Shape: ')
  count+=1
  print(dframe.shape)

  if (valCnt):
    print('\nValue Counts for each feature -')
    for colname in dframe.columns :
      print(f'\n{count}: {colname} value_counts(): ')
      print(dframe[colname].value_counts())
      count +=1
# %%
Dataset(dfmRNA, True)
# %%
dfmRNA1 = dfmRNA.copy()
# %%
"""
Transform data to have patient samples as rows and genes as columns 
"""

# dfmRNA.shape      check shape  ((20531, 474)) transpose dataframe
dfExpression = dfmRNA1.T
# dfmRNA_transposed.shape     verify  ((474, 20531))
# %%
# Scale data using Z-Score 
dfZscore = dfExpression.apply(zscore)
# Check dfZscore.head()
# %%
# Set samples patient index to its own column
dfZscore = dfZscore.rename_axis('samples').reset_index()
# %%
# Retrieve first column (samples) and column containing corresponding gene id
dflevel1 = dfZscore[dfZscore['gene_id'].str.contains('LOC100130426')]
# %%
# Remove columns where expression is 0
#dflevel2 = dflevel1.loc[:, (dflevel1!= 0).any(axis=0)]
# %%
# List columns with patient sample > 0
#dflevel3 = dflevel2.columns.values.tolist()
# %%
# Remove 'gene id' from list
#dflevel4 = dflevel3[1:]
# %%
# Create dictionary for mapping mRNA data case submitter 
# dictionary = dict(zip(dfDict.mRNA_case_submitter_id, dfDict.clinical_case_submitter_id))
# len(dictionary)

# dictionary2 = list(dfmRNA.gt(0).dot(dfmRNA.columns + ","))
# for gene item in gene_id in dfmRNA, 
    #find column_name with value > O
        # for items in column_name,
            # create dataframe from dfClinical with corresponding id



# %%
# Clean survival data 
dfClinicalcopy1 = dfClinical.copy()
print(dfClinicalcopy1.vital_status.value_counts())
# %%
def cleanStatus (row):
    thisstatus = row['vital_status']
    if thisstatus == 'Alive' : return 1
    if thisstatus == 'Dead' : return 0
    if thisstatus == 'Not Reported' : return np.nan
    return np.nan

dfClinicalcopy1['vital_status'] = dfClinicalcopy1.apply(cleanStatus, axis =1)
print(dfClinicalcopy1.vital_status.value_counts())

# %%
# !pip install scikit-survival
import matplotlib.pyplot as plt
from sksurv.nonparametric import kaplan_meier_estimator
data_y = dfClinical.copy()

time, survival_prob = kaplan_meier_estimator(data_y["vital_status"], data_y["days_to_death"])
plt.step(time, survival_prob, where="post")
plt.ylabel("est. probability of survival $\hat{S}(t)$")
plt.xlabel("time $t$")
# %%
